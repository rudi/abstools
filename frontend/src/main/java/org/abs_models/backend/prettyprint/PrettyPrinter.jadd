// -*- mode: java; tab-width: 4; -*-
import java.io.PrintWriter;
import org.abs_models.backend.prettyprint.*;

aspect doPrettyPrinter {

    /** Controls whether to include the standard library in pretty-printing
     */
    public boolean Model.doPrettyPrintStdLib = false;

    public void List.doPrettyPrint(PrintWriter stream, ABSFormatter formatter, String separator) {
        if (getNumChild() > 0) {
            getChild(0).doPrettyPrint(stream, formatter);
            for (int i = 1; i < getNumChild(); i++) {
                stream.print(separator+" ");
                getChild(i).doPrettyPrint(stream, formatter);
            }
        }
    }

    public void List.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        if (getNumChild() > 0) {
            getChild(0).doPrettyPrint(stream, formatter);
            for (int i = 1; i < getNumChild(); i++) {
                stream.println();
                formatter.afterStmt();
                getChild(i).doPrettyPrint(stream, formatter);
            }
        }
    }

    public void ASTNode.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        ST t = PrettyPrinterBackEnd.templates.getInstanceOf(getTemplateName());
        if (t == null) {
            throw new NotImplementedYetException(this);
        } else {
            t.add("node", this);
            stream.print(t.render());
        }
    }

    public void Model.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        for (ModuleDecl d : getModuleDecls()) {
            if (doPrettyPrintStdLib || (! Constants.BUILT_IN_LIBS.contains(d.getName()))) {
                d.doPrettyPrint(stream, formatter);
            }
        }

        for (DeltaDecl d : getDeltaDecls()) {
            d.doPrettyPrint(stream, formatter);
        }
        if (hasProductLine()) {
            getProductLine().doPrettyPrint(stream, formatter);
        }
    }

    public void ModuleDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.println("module " + getName() + ";");
        stream.println();
        formatter.afterStmt();

        for (Export e : getExportList()) {
            e.doPrettyPrint(stream, formatter);
            stream.println();
            formatter.afterStmt();
        }

        stream.println();
        formatter.afterStmt();

        for (Import i : getImportList()) {
            if (i instanceof StarImport && ((StarImport)i).getModuleName().equals(Constants.STDLIB_NAME)) continue;
            i.doPrettyPrint(stream, formatter);
            stream.println();
            formatter.afterStmt();
        }

        stream.println();
        formatter.afterStmt();

        for (Decl decl : getDecls()) {
            decl.doPrettyPrint(stream, formatter);
            stream.println();
            stream.println();
            formatter.afterStmt();
        }

        stream.println();
        formatter.afterStmt();

        if (hasBlock()) {
            getBlock().doPrettyPrint(stream, formatter);
        }
        stream.println();

        stream.flush();

    }

    public void ProductDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("product ");
        stream.print(getName());
        stream.print("(");
        getProduct().getFeatureList().doPrettyPrint(stream, formatter, ",");
        stream.print(");");

        stream.println();
        formatter.afterStmt();
        stream.flush();
    }

    public void Feature.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
        if (getNumAttrAssignment() > 0) {
            stream.print("{");
            getAttrAssignmentList().doPrettyPrint(stream, formatter, ",");
            stream.print("}");
        }
    }

    public void AttrAssignment.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
        stream.print("=");
        Value v = getValue();
        if (v instanceof IntVal) {
            stream.print(((IntVal) v).getValue());
        } else if (v instanceof BoolVal) {
            stream.print(((BoolVal) v).getValue() ? "True" : "False");
        }
    }

    public void ProductLine.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("productline ");
        stream.print(getName());
        stream.print(";");
        formatter.afterStmt();
        boolean hasFeatures = false;
        if (getNumFeature() > 0 && ! hasFeatures) {
            hasFeatures = true;
            stream.println();
            stream.print("features ");
        }
        getFeatureList().doPrettyPrint(stream, formatter, ",");
        if (hasFeatures) {
            stream.println(";");
            formatter.afterStmt();
        }

        getDeltaClauseList().doPrettyPrint(stream, formatter);

        stream.println();
        formatter.afterStmt();
        stream.flush();
    }

    public void DeltaClause.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("delta ");
        getDeltaspec().doPrettyPrint(stream, formatter);

        if (getNumAfterDeltaID() > 0) {
            stream.print(" after ");
            getAfterDeltaIDList().doPrettyPrint(stream, formatter, ",");
        }

        if (hasAppCond()) {
            stream.print(" when ");
            getAppCond().doPrettyPrint(stream, formatter);
        }

        stream.print(";");
    }

    public abstract void AppCond.doPrettyPrint(PrintWriter stream, ABSFormatter formatter);
    
    public void AppCondAnd.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getLeft().doPrettyPrint(stream, formatter);
        stream.print(" && ");
        getRight().doPrettyPrint(stream, formatter);
    }
    
    public void AppCondOr.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getLeft().doPrettyPrint(stream, formatter);
        stream.print(" || ");
        getRight().doPrettyPrint(stream, formatter);
    }

    public void AppCondNot.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("~");
        getAppCond().doPrettyPrint(stream, formatter);
    }
    
    public void AppCondFeature.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }
    
    public void Deltaspec.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getDeltaID());
        if (getNumDeltaparam() > 0) {
            stream.print("(");
            getDeltaparamList().doPrettyPrint(stream, formatter, ",");
            stream.print(")");
        }
    }

    public void Deltaparam.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }

    public void DeltaID.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }

    protected boolean FunctionDecl.isSelector() {
    	for (Annotation a : getAnnotationList()) {
            if (! (a.getValue() instanceof StringLiteral)) {
                continue;
            }
              
            StringLiteral sl = (StringLiteral) a.getValue();
            if (ASTPreProcessor.FUNCTIONSELECTOR.equals(sl.getContent())) {
                return true;
            }
        }
        return false;
    }
    
    public void FunctionDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        if (isSelector()) {
        	//skip selector
        	return;
        }
    
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        stream.print("def ");
        getTypeUse().doPrettyPrint(stream, formatter);
        stream.print(" ");
        stream.print(getName());
        doPrettyPrintTypeParam(stream, formatter);
        stream.print("(");
        getParamList().doPrettyPrint(stream, formatter, ",");
        stream.print(") = ");
        getFunctionDef().doPrettyPrint(stream, formatter);
        formatter.afterStmt();
    }

    public void PartialFunctionDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
      getAnnotationList().doPrettyPrint(stream, formatter, "");
      if (getNumAnnotation() > 0) {
          stream.println();
          formatter.afterStmt();
      }
      stream.print("def ");
      getTypeUse().doPrettyPrint(stream, formatter);
      stream.print(" ");
      stream.print(getName());
      doPrettyPrintTypeParam(stream, formatter);
      stream.print("(");
      getParamList().doPrettyPrint(stream, formatter, ",");
      stream.print(") (");
      getFuncParamList().doPrettyPrint(stream, formatter, ",");
      stream.print(") = ");
      getPartialFunctionDef().doPrettyPrint(stream, formatter);
      formatter.afterStmt();
    }

    public void FunctionParamDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
      stream.print(getName());
    }

    public void PartialFunctionDef.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.println();
        formatter.afterOpenBrace();
        formatter.afterStmt();
        getPureExp().doPrettyPrint(stream, formatter);
        stream.print(";");
        formatter.beforeCloseBrace();
    }

    public void NamedParFnAppParam.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }

    public void AnonymousFunctionDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("(");
        getParams().doPrettyPrint(stream, formatter, ",");
        stream.print(") => ");
        getPureExp().doPrettyPrint(stream, formatter);
    }

    public void FunctionDecl.doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) { }

    public void ParametricFunctionDecl.doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) { 
        if (getNumTypeParameter() > 0) {
            stream.print("<");
            getTypeParameterList().doPrettyPrint(stream, formatter, ",");
            stream.print(">");
        }	
    }

    public void PartialFunctionDecl.doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) {}

    public void ParametricPartialFunctionDecl.doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) {
       if (getNumTypeParameter() > 0) {
           stream.print("<");
           getTypeParameterList().doPrettyPrint(stream, formatter, ",");
           stream.print(">");
       }
    }

    public void BuiltinFunctionDef.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("builtin;");
    }

    public void ExpFunctionDef.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.println();
        formatter.afterOpenBrace();
        formatter.afterStmt();
        getRhs().doPrettyPrint(stream, formatter);
        stream.print(";");
        formatter.beforeCloseBrace();
    }

    public void DeltaDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("delta ");
        stream.print(getName());

        List<DeltaParamDecl> dpl = getParamList();
        if (dpl.getNumChild() > 0) {
            stream.print("(");
            dpl.doPrettyPrint(stream, formatter, ",");
            stream.print(")");
        }
        stream.println(";");
        formatter.afterStmt();
        getDeltaAccesss().doPrettyPrint(stream, formatter);
        stream.println();
        getModuleModifierList().doPrettyPrint(stream, formatter);

        //        List<FunctionalModifier> fms = getFunctionalModifierList();
        //        int mcount = fms.getNumChild();
        //        if (mcount > 0) {
        //            formatter.afterStmt();
        //        }
        //        fms.doPrettyPrint(stream, formatter);
        //
        //        List<ClassOrIfaceModifier> cms = getClassOrIfaceModifierList();
        //        if (cms.getNumChild() > 0 && mcount == 0) {
        //            formatter.afterStmt();
        //        } 
        //        cms.doPrettyPrint(stream, formatter);

        stream.println();
    }

    public void DeltaAccess.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("uses ");
        stream.print(getModuleName());
        stream.print(";");
    }

    public void AddImportModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("adds ");
        getImport().doPrettyPrint(stream, formatter);
        stream.println();
    }

    public void AddExportModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("adds ");
        getExport().doPrettyPrint(stream, formatter);
        stream.println();
    }

    public void RemoveClassModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("removes class ");
        stream.print(getName());
        stream.print(";");
    }

    public void ModifyClassModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("modifies class ");
        stream.print(getName());

        if (getNumAddedInterface() > 0) {
            stream.print(" adds ");
            getAddedInterfaceList().doPrettyPrint(stream, formatter, ",");
        }
        // TODO deal with removedInterfaceList

        formatter.beforeOpenBrace();
        stream.println("{");
        formatter.afterOpenBrace();

        List<Modifier> mms = getModifierList();
        if (mms.getNumChild() > 0) {
            mms.doPrettyPrint(stream, formatter);
            stream.println();
            formatter.afterStmt();
        }

        formatter.beforeCloseBrace();
        stream.print("}");
        formatter.afterCloseBrace();
    }

    public void AddFieldModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("adds ");
        getFieldDecl().doPrettyPrint(stream, formatter);
    }

    public void RemoveFieldModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("removes ");
        getFieldDecl().doPrettyPrint(stream, formatter);
    }

    public void AddInterfaceModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("adds ");
        getInterfaceDecl().doPrettyPrint(stream, formatter);
    }

    public void AddClassModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("adds ");
        getClassDecl().doPrettyPrint(stream, formatter);
    }

    public void DeltaFieldParam.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getParamDecl().doPrettyPrint(stream, formatter);
    }

    public void DeltaClassParam.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
        stream.print(" ");
        getHasCondition().doPrettyPrint(stream, formatter);
    }

    public void HasField.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("hasField");
        getFieldDecl().doPrettyPrint(stream, formatter);
    }

    public void HasInterface.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("hasInterface");
        getInterfaceTypeUse().doPrettyPrint(stream, formatter);
    }

    public void HasMethod.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("hasMethod");
        getMethodSig().doPrettyPrint(stream, formatter);
    }

    public void TypeSynDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        stream.print("type ");
        stream.print(getName());
        stream.print(" = ");
        getValue().doPrettyPrint(stream, formatter);
        stream.print(";");
    }


    public void MethodSig.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        getReturnType().doPrettyPrint(stream, formatter);
        stream.print(" ");
        stream.print(getName().replaceAll("\\$", ""));
        stream.print("(");
        getParams().doPrettyPrint(stream, formatter, ",");
        stream.print(")");
    }


    public void TypeParameterDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }

    public void DataTypeDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("data ");
        stream.print(getName());
        doPrettyPrintTypeParam(stream, formatter);
        if (getNumDataConstructor() > 0) {
            stream.print(" = ");
            getDataConstructorList().doPrettyPrint(stream, formatter, "|");
        }
        stream.print(";");
    }

    public void AddDataTypeModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter)
    {
        stream.print("adds "); 
        getDataTypeDecl().doPrettyPrint(stream, formatter);
        stream.println();
    }

    public void ModifyInterfaceModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("modifies interface ");
        stream.print(getName());

        formatter.beforeOpenBrace();
        stream.println("{");
        formatter.afterOpenBrace();

        getMethodSigModifierList().doPrettyPrint(stream, formatter);

        formatter.beforeCloseBrace();
        stream.print("}");
        formatter.afterCloseBrace();
    }

    public void AddMethodSigModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("adds ");
        getMethodSig().doPrettyPrint(stream, formatter);
        stream.print(";");
    }

    public void RemoveMethodSigModifier.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("removes ");
        getMethodSig().doPrettyPrint(stream, formatter);
        stream.print(";");
    }

    public void DataTypeDecl.doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) { }

    public void ParametricDataTypeDecl.doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) { 
        if (getNumTypeParameter() > 0) {
            stream.print("<");
            getTypeParameterList().doPrettyPrint(stream, formatter, ",");
            stream.print(">");
        }
    }

    public void DataConstructor.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
        if (getNumConstructorArg() > 0) {
            stream.print("(");
            getConstructorArgList().doPrettyPrint(stream, formatter, ",");
            stream.print(")");
        }
    }

    public void ConstructorArg.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getTypeUse().doPrettyPrint(stream, formatter);
        if (hasSelectorName()) {
            stream.print(" ");
            stream.print(getSelectorName());
        }
    }

    public void UnresolvedTypeUse.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        // TODO: getAnnotationList().doPrettyPrint(stream, formatter, "");
        stream.print(getName());    
    }

    public void ConstructorPattern.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getConstructor());
        if (getNumParam() > 0) {
            stream.print("( ");
            getParamList().doPrettyPrint(stream, formatter, ",");
            stream.print(" )");
        }
    }

    public void LiteralPattern.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getLiteral().doPrettyPrint(stream, formatter);
    }

    public void PatternVar.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getVar().doPrettyPrint(stream, formatter);
    }

    public void PatternVarDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }

    public void PatternVarUse.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }

    public void UnderscorePattern.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("_");
    }

    public boolean FnApp.isVariadicFnApp() {
        // see CreateJastAddASTListener:exitVariadicFunctionExp
        return getNumParam() == 1 && getParam(0) instanceof ListLiteral;
    }

    public void TraitDecl.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {

    }
    public void TraitUse.doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {

    }
}
